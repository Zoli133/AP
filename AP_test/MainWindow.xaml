<Window x:Class="AP_test.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AP_test"
        mc:Ignorable="d"
        Title="Ap_Test" Height="650" Width="400">

    <Window.Resources>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <ControlTemplate x:Key="ButtonTemplate1" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="5,5,5,5">
                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="{x:Type Button}">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Foreground" Value="#4E87D4"/>
            <Setter Property="FontFamily" Value="Calibri"/>
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Margin" Value="0,10,10,10"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Cursor" Value="Hand" />
        </Style>
        <Style TargetType="Label">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontFamily" Value="Calibri"/>
            <Setter Property="Margin" Value="0,0,0,0"/>
        </Style>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <local:InvertBoolConverter x:Key="invertBoolConverter"/>
        <local:InverzBoolToVisibilityConverter x:Key="InverzBoolToVisibilityConverter"/>
    </Window.Resources>
    
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0">
                <Button Template="{DynamicResource ButtonTemplate1}" Command="{Binding Path=OpenFileCommand}" IsEnabled="{Binding IsInProgress, Converter={StaticResource invertBoolConverter}}" HorizontalAlignment="Left" >Select File</Button>
                <Label Content="Selected File:"/>
                <Label Content="{Binding Path=FilePath}"/>
            </StackPanel>
        <WrapPanel Grid.Row="1" Visibility="{Binding Path=IsCurrentParsed, Converter={StaticResource InverzBoolToVisibilityConverter}}">
            <Button Template="{DynamicResource ButtonTemplate1}" Command="{Binding Path=StartStopCommand}" IsEnabled="{Binding Path=IsFileSelected}" Content="{Binding Path=StartCancelText}"/>
            <StackPanel Orientation="Horizontal" Visibility="{Binding Path=IsInProgress, Converter={StaticResource BooleanToVisibilityConverter}}">
                <MediaElement Source="images/spinner.gif" LoadedBehavior="Play" Stretch="Fill" Height="40" Width="40">
                    <MediaElement.OpacityMask>
                        <ImageBrush ImageSource="images/spinner.gif"/>
                    </MediaElement.OpacityMask>
                </MediaElement>
                <Label Content="Parsing File..." HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="24"></Label>
            </StackPanel>
        </WrapPanel>
        <StackPanel Grid.Row="1" Visibility="{Binding Path=IsCurrentParsed, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Label>Name occurance:</Label>
            <ListBox ItemsSource="{Binding Path=WordCount}" ScrollViewer.VerticalScrollBarVisibility="Visible" Height="420">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Grid Background="Transparent" HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Text="{Binding Path=Key}" HorizontalAlignment="Stretch" Width="Auto"/>
                            <TextBlock Grid.Column="1" Text="{Binding Path=Value}" HorizontalAlignment="Stretch" Width="Auto" />
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </StackPanel>
    </Grid>
</Window>
